02 January 2025, 00:57
song on: 7minute Drill [Might Delete Later], J.Cole.
----------------------------------------------------------

---SYSTEM VISION---
The system must facilitate the centralization on students and mentors in one space where knowledge can be shared quickly and affectively. 

---REQUIREMENTS---
The system will have 3 actors, meaning it will be divided into 3 subsystems.
 --: https://mentorcruise.com/
 --: https://www.pushfar.com/article/how-to-find-a-free-mentor-and-why-you-need-one/
 --: https://adplist.org/	

0. System
   - Thing I need the system to perform
   > Selfie verification.
   > Waiting period for mentor/teachers after registration.
   > Payment plan selection.
   > Implement free trail.		 	
   > Use youtubers as mentor dummies.


1. Admin subsystem
    - The super admin who overlook the system and posses super privilege's.
    
    > CRUD on tutors and students accounts.
    > CRUD on tutor followers.
    > CRUD on posts, notes, messages.
    > CRUD on classes, course.


2. Tutor subsystem
    - The tutor seem to be the most complex subsystem here.

    > Detail profile
    > Follow other tutors
    > Post messages on account.
    > Make notes for students.
    > CRUD course
    > Add links to external resources, e.g. link to teams video session etc.
    > CRUD book recommendation.
    > Respond to student chats.


3. Student subsystem
    - Students system will facilitate actions like to stay up to date with tutors content/course.  

    > Detail profile
    > Follow/Unfollow tutor
    > Write post
    > Join/Exit course  
    > Read book recommendation
    > Use links etc.
    > Virtual student card

GLOBAL PAGES:
1. homepage: overview of the site purpose, and key features
2. About us: Mission, team behind the site.
3. How it works: Detailed explanation of how the platform operates, including process for signing up, and how to find students. 
4. Browse tutors: Searchable directory of tutor with basic information. (subjects, qualification, rating, profiles)
5. Testimonials/Reviews: Feedback from tutor & students how have used the platform.
6. FAQ: 
7. Contact us: 
8. Blog/Resources: Articles, tips, and resources related to tutoring, education, and learning.
9. Pricing:
10:  


---------------------------------------------------
Strengths: The concept taps into the growing demand for peer-to-peer learning and personalized education. 
It could appeal to a wide range of users, from students to professionals looking to upskill or hobbyists sharing unique expertise.
 If done right, it could create a vibrant, self-sustaining community.
Opportunities: You could integrate features like video sessions, progress tracking, or even AI-driven mentor-mentee matching to stand out.
Monetization options like subscription tiers, commission on paid sessions, or premium features could work well.
Challenges: Standing out in a crowded market (think platforms like Skillshare, Udemy, or even LinkedIn Learning) might be tricky. 
You’ll need a clear unique selling point—maybe hyper-local mentorship, niche skills, or a focus on affordability. 
Building trust and ensuring quality mentors will also be key.
Suggestion: Consider a feature that lets users showcase their learning outcomes (like portfolios or testimonials) to build credibility 
and attract more users.



file_put_contents('log.csv', 'Request method: ' . $_SERVER['REQUEST_METHOD'] ?? 'Empty request method'
    . "\n"
    . 'Request URI: ' . $_SERVER['REQUEST_URI'] ?? 'Empty request URI'
    . "\n"
    . 'Script name: ' . $_SERVER['SCRIPT_NAME'] ?? 'Empty script name'
    . "\n"
    . 'Query string: ' . $_SERVER['QUERY_STRING'] ?? 'Empty query string'
    . "\n"
    . 'Remote address: ' . $_SERVER['REMOTE_ADDR'] ?? 'Empty remote address'
    . "\n"
    . 'Server name: ' . $_SERVER['SERVER_NAME'] ?? 'Empty server name'
    . "\n"
    . 'Server port: ' . $_SERVER['SERVER_PORT'] ?? 'Empty server port'
    . "\n"
    . 'Server protocol: ' . $_SERVER['SERVER_PROTOCOL'] ?? 'Empty server protocol'
    . "\n"
    . 'Server software: ' . $_SERVER['SERVER_SOFTWARE'] ?? 'Empty server software'
    . "\n"
    . 'Post data: ' . json_encode($_POST, JSON_PRETTY_PRINT)
    . "\n", FILE_APPEND);

UNDERSTAND THE DIFFERENCE: on sending data to backend
 const formData = new FormData();
        formData.append('name', name);
        formData.append('id_number', id_number);
        formData.append('email', email);
        formData.append('phone', phone);
        formData.append('password', password);
        formData.append('confirm_password', confirm_password);

        const response = await fetch('process_registration.php', {
            method: 'POST',
            body: formData
        });
-----
const response = await fetch('process_registration.php', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
    },
    body: new URLSearchParams({
        name: name,
        id_number: id_number,
        email: email,
        phone: phone,
        password: password,
        confirm_password: confirm_password
    })
});
----
const response = await fetch('process_registration.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                name: name,
                id_number: id_number,
                email: email,
                phone: phone,
                password: password,
                confirm_password: confirm_password
            })
        });


