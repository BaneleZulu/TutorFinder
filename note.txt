02 January 2025, 00:57
song on: 7minute Drill [Might Delete Later], J.Cole.
----------------------------------------------------------

---SYSTEM VISION---
The system must facilitate the centralization on students and mentors in one space where knowledge can be shared quickly and affectively. 

---REQUIREMENTS---
The system will have 3 actors, meaning it will be divided into 3 subsystems.
 --: https://mentorcruise.com/
 --: https://www.pushfar.com/article/how-to-find-a-free-mentor-and-why-you-need-one/
 --: https://adplist.org/	

0. System
   - Thing I need the system to perform
   > Selfie verification.
   > Waiting period for mentor/teachers after registration.
   > Payment plan selection.
   > Implement free trail.		 	
   > Use youtubers as mentor dummies.


1. Admin subsystem
    - The super admin who overlook the system and posses super privilege's.
    
    > CRUD on tutors and students accounts.
    > CRUD on tutor followers.
    > CRUD on posts, notes, messages.
    > CRUD on classes, course.


2. Tutor subsystem
    - The tutor seem to be the most complex subsystem here.

    > Detail profile
    > Follow other tutors
    > Post messages on account.
    > Make notes for students.
    > CRUD course
    > Add links to external resources, e.g. link to teams video session etc.
    > CRUD book recommendation.
    > Respond to student chats.


3. Student subsystem
    - Students system will facilitate actions like to stay up to date with tutors content/course.  

    > Detail profile
    > Follow/Unfollow tutor
    > Write post
    > Join/Exit course  
    > Read book recommendation
    > Use links etc.
    > Virtual student card

GLOBAL PAGES:
1. homepage: overview of the site purpose, and key features
2. About us: Mission, team behind the site.
3. How it works: Detailed explanation of how the platform operates, including process for signing up, and how to find students. 
4. Browse tutors: Searchable directory of tutor with basic information. (subjects, qualification, rating, profiles)
5. Testimonials/Reviews: Feedback from tutor & students how have used the platform.
6. FAQ: 
7. Contact us: 
8. Blog/Resources: Articles, tips, and resources related to tutoring, education, and learning.
9. Pricing:
10:  


---------------------------------------------------
Strengths: The concept taps into the growing demand for peer-to-peer learning and personalized education. 
It could appeal to a wide range of users, from students to professionals looking to upskill or hobbyists sharing unique expertise.
 If done right, it could create a vibrant, self-sustaining community.
Opportunities: You could integrate features like video sessions, progress tracking, or even AI-driven mentor-mentee matching to stand out.
Monetization options like subscription tiers, commission on paid sessions, or premium features could work well.
Challenges: Standing out in a crowded market (think platforms like Skillshare, Udemy, or even LinkedIn Learning) might be tricky. 
You’ll need a clear unique selling point—maybe hyper-local mentorship, niche skills, or a focus on affordability. 
Building trust and ensuring quality mentors will also be key.
Suggestion: Consider a feature that lets users showcase their learning outcomes (like portfolios or testimonials) to build credibility 
and attract more users.



file_put_contents('log.csv', 'Request method: ' . $_SERVER['REQUEST_METHOD'] ?? 'Empty request method'
    . "\n"
    . 'Request URI: ' . $_SERVER['REQUEST_URI'] ?? 'Empty request URI'
    . "\n"
    . 'Script name: ' . $_SERVER['SCRIPT_NAME'] ?? 'Empty script name'
    . "\n"
    . 'Query string: ' . $_SERVER['QUERY_STRING'] ?? 'Empty query string'
    . "\n"
    . 'Remote address: ' . $_SERVER['REMOTE_ADDR'] ?? 'Empty remote address'
    . "\n"
    . 'Server name: ' . $_SERVER['SERVER_NAME'] ?? 'Empty server name'
    . "\n"
    . 'Server port: ' . $_SERVER['SERVER_PORT'] ?? 'Empty server port'
    . "\n"
    . 'Server protocol: ' . $_SERVER['SERVER_PROTOCOL'] ?? 'Empty server protocol'
    . "\n"
    . 'Server software: ' . $_SERVER['SERVER_SOFTWARE'] ?? 'Empty server software'
    . "\n"
    . 'Post data: ' . json_encode($_POST, JSON_PRETTY_PRINT)
    . "\n", FILE_APPEND);

UNDERSTAND THE DIFFERENCE: on sending data to backend
 const formData = new FormData();
        formData.append('name', name);
        formData.append('id_number', id_number);
        formData.append('email', email);
        formData.append('phone', phone);
        formData.append('password', password);
        formData.append('confirm_password', confirm_password);

        const response = await fetch('process_registration.php', {
            method: 'POST',
            body: formData
        });
-----
const response = await fetch('process_registration.php', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
    },
    body: new URLSearchParams({
        name: name,
        id_number: id_number,
        email: email,
        phone: phone,
        password: password,
        confirm_password: confirm_password
    })
});
----
const response = await fetch('process_registration.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                name: name,
                id_number: id_number,
                email: email,
                phone: phone,
                password: password,
                confirm_password: confirm_password
            })
        });


## Documentation of Registration Process Refinements

### Introduction
This document provides a concise overview of the key issues encountered during the optimization and refinement of the user registration phase in the TutorFinder system. The registration process involves a multi-step workflow, including email input, user type selection (mentee or mentor), and role-specific data collection. The refinements were aimed at enhancing functionality, error handling, and user experience, ensuring graceful progression and validation. The issues primarily stemmed from inconsistencies in overlay management, validation logic, local storage handling, and confirmation display.

### Issues Encountered
1. **Inconsistent Progression from Initial Steps**: Users, particularly mentees, occasionally failed to advance from the first step despite valid input. This was linked to strict validation rules not being met (e.g., phone number format requiring exactly 10 digits without prefixes) and a lack of real-time feedback, leading to unaddressed errors upon submission.

2. **Exit Button Malfunction**: The exit button in registration overlays did not consistently close the overlay, often due to syntax errors in closure functions or improper handling of overlay visibility states.

3. **Automatic Overlay Opening on Page Reload**: Residual data in local storage (e.g., email and user type) caused the registration overlay to reopen automatically upon page reload, disrupting the user flow for incomplete registrations.

4. **Local Storage Conflicts During Cleanup**: Clearing local storage in cleanup functions (e.g., on confirmation close or exit) led to undefined user type values in subsequent operations, such as overlay closure, resulting in runtime errors.

5. **Empty Confirmation Overlay for Mentees**: Upon reaching the final step for mentees, the confirmation content failed to display, showing only the progress bar without the inserted details, due to improper selector scoping and timing of control removal.

### Solutions Implemented
1. **Enhanced Validation with Real-Time Feedback**: Introduced real-time validation on input blur events for Step 1 fields (e.g., fullname, DOB, phone, password). This provides immediate error messages and visual cues (success/error classes), reducing submission failures. Phone inputs were restricted to digits only with a 10-character limit. Validation in `validateStep` was refined to clear errors explicitly and log failures for debugging.

2. **Reliable Exit and Closure Mechanisms**: Corrected the `closeOverlayStep` function to use global `closeOverlay` consistently. Ensured exit buttons reset forms, clear storage, and stop camera streams without syntax issues. Added MutationObserver to reinitialize steps on overlay visibility changes.

3. **Controlled Local Storage Management**: Retained local storage for temporary persistence of email and user type but introduced dynamic retrieval via `getUserType` to handle undefined states gracefully. Clearing was moved after closure operations in cleanup functions to prevent access to removed data. Initial checks for auto-opening used a snapshot of storage before any clearing.

4. **Sequenced Cleanup Operations**: In `closeConfirmation` and exit handlers, reordered operations to compute and cache necessary values (e.g., form ID, overlay ID) before removing local storage items, ensuring all dependent functions execute with valid data.

5. **Scoped Confirmation Display and Controls**: Modified `removeControls` to query elements within the specific overlay based on user type, preventing global mismatches. Ensured `displayConfirmation` inserts content after controls are hidden but within the visible final step element. Updated progress bar logic to handle mentee's two-step process without extraneous activations.

### Conclusion
These refinements have resulted in a more robust and user-friendly registration system, minimizing errors and improving flow. Future enhancements could include backend integration for persistent storage and additional validation for role-specific fields. This iterative process demonstrates the value of targeted debugging and modular code adjustments in achieving functional reliability.